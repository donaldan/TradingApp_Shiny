{
    "collab_server" : "",
    "contents" : "###################################\n# Server functions\n# \n# Andrew Donaldson 2016\n###################################\n\nrequire(quantmod)\nrequire(PerformanceAnalytics)\n\nshinyServer(function(input, output) {\n  \n  getData <- function(inputPath = inputPath,\n                      inputFile = inputFile,\n                      keepColumns = keepColumns)\n    {\n    data <- read.csv( file.path(inputPath,inputFile), sep=\",\")\n    keepColumns <- c(\"date\",\"retns\")\n    dataDaily <- data[,keepColumns]\n    colnames(dataDaily) <- c(\"date\",\"retns\")\n    days <- as.Date(dataDaily[,\"date\"],\"%Y-%m-%d\")\n    dailyRtn <- as.numeric(substring(dataDaily[,\"retns\"],1,nchar(as.character(dataDaily[,\"retns\"]))-1)) ##\n    return(list(date=days,rtn=dailyRtn))\n  }\n  \n  data <- reactive({\n    inputPath <- \"~/git/andy-shiny\"\n    switch(input$strategy,\n            \"Commodities\" = getData(inputPath = inputPath,\n                    inputFile=\"Commodities.csv\",\n                    keepColumns=c(\"date\",\"retns\")),\n            \"US 10Y Bond\" = getData(inputPath = inputPath,\n                    inputFile=\"US10Y.csv\",\n                    keepColumns=c(\"date\",\"retns\")),\n            \"Precious_Metals\" = getData(inputPath = inputPath,\n                    inputFile=\"GoldSilver.csv\",\n                    keepColumns=c(\"date\",\"retns\")),\n    \"S&P_500\" = getData(inputPath = inputPath,\n                    inputFile=\"SPX.csv\",\n                    keepColumns=c(\"Date\",\"retns\")),\n    \"Portfolio\" = getData(inputPath = inputPath,\n                    inputFile=\"Portfolio.csv\",\n                    keepColumns=c(\"date\",\"retns\"))\n    )\n  })\n  \n  output$plot1 <- renderPlot({\n    data <- data()\n    posStart <- min(which(as.Date(data$date,format=\"%Y-%m-%d\") >= as.Date(input$startDate,format=\"%Y-%m-%d\")))\n    posEnd <- max(which(as.Date(data$date,format=\"%Y-%m-%d\") <= as.Date(input$endDate,format=\"%Y-%m-%d\")))\n    \n    if (posStart >= posEnd)\n      stop(\"EndingDate must be > StartingDate\")\n    \n    if (posStart < posEnd){\n      x <- data$date[posStart:posEnd]\n      y <- data$rtn[posStart:posEnd]\n      \n      xDD <- as.vector(\n        # Drawdowns\n        PerformanceAnalytics::findDrawdowns\n        (y/100))\n      \n      par(mfrow=c(2,1),cex=0.9,mex=0.4)\n      \n      plot(x,cumsum(y),\n           type=\"l\",\n           main=\" Equity Curve (%)\",\n           xlab=\"\",\n           ylab=\"\",\n           col=\"royal blue\",\n           lwd=1.5)\n      grid(col=\"dark grey\")\n      \n      plot(x,100*xDD,\n           type=\"l\",\n           xlab=\"\",\n           ylab=\"\",\n           main=\"DrawDowns (%)\",\n           col=\"royal blue\",\n           lwd=1.5)\n      grid(col=\"dark grey\")  \n    }\n  })\n  \n  output$plot2 <- renderPlot({\n    # data <- dt\n    # input <- NULL\n    #input$startDate <- \"2007-01-01\"\n    #input$endDate <- \"2016-09-12\"\n    data <- data()\n    posStart <- min(which(as.Date(data$date,format=\"%Y-%m-%d\") >= as.Date(input$startDate,format=\"%Y-%m-%d\")))\n    posEnd <- max(which(as.Date(data$date,format=\"%Y-%m-%d\") <= as.Date(input$endDate,format=\"%Y-%m-%d\")))\n    \n    x <- data$date[posStart:posEnd]\n    y <- data$rtn[posStart:posEnd]\n    \n    par(mfrow=c(2,1),cex=0.9,mex=0.6)\n    \n    chart.VaRSensitivity(xts(y,order.by=x),\n                         methods = c(\"HistoricalVaR\", \"GaussianVaR\"),\n                         colorset = bluefocus, \n                         lwd = 2,\n                         xlab=\"\",\n                         ylab=\"\",\n                         main=\"Risk Confidence Sensitivity\")  \n    \n    aa <- c(min(rollapply(y,5,sum)),\n            min(rollapply(y,10,sum)),\n            min(rollapply(y,20,sum)),\n            min(rollapply(y,60,sum)),\n            min(rollapply(y,90,sum)))\n    \n    bp <- barplot(aa,\n                  border = NA,\n                  #                   col=c(1:length(aa)),\n                  col=c(\"light grey\",\"sky blue 3\",\"dark blue\",\"royal blue\",\"light blue\"),\n                  ylim=range(floor(min(aa)) - 1,0),\n                  main=\"Worst 5,10,20,60,90 days return (%)\")\n    abline(h=0)\n    \n    text(bp,\n         aa,\n         labels=as.character(round(aa,2)),\n         pos=1) \n    \n  })\n  \n  # create simple temporary data.frame with rownames\n  xx <- data.frame(aa = head(letters), row.names = head(letters))\n  # override default for not displaying rownames - see ?renderTable\n  output$tablePerformance <- renderTable(  expr = xx , rownames = TRUE )\n   \n    output$tablePerformance2 <- renderTable({  \n      data <- data()\n    posStart <- min(which(as.Date(data$date,format=\"%Y-%m-%d\") >= as.Date(input$startDate,format=\"%Y-%m-%d\")))\n    posEnd <- max(which(as.Date(data$date,format=\"%Y-%m-%d\") <= as.Date(input$endDate,format=\"%Y-%m-%d\")))\n    x <- data$date[posStart:posEnd]\n    y <- data$rtn[posStart:posEnd]\n    \n    dailyDD <- as.vector(\n      # Drawdowns\n      PerformanceAnalytics::findDrawdowns\n      (y/100))\n    nbDays <- length(x)\n    nbYears <- nbDays/252\n    totalReturn <- sum(y)\n    annualizedReturn <- round(totalReturn/nbYears,2)\n    annualizedVolatility <- round(sd(y)*sqrt(252),2)\n    sharpeRatio <- round(annualizedReturn/annualizedVolatility,2)\n    profitFactor <- round(sum(y[y > 0])/abs(sum(y[y < 0])),2)\n    \n    rtnTable <- rbind(paste(annualizedReturn,\"%\",sep=\"\"),paste(annualizedVolatility,\"%\",sep=\"\"),sharpeRatio,profitFactor)\n    rownames(rtnTable) <- c(\"Ann.Return\",\"Ann.Volatility\",\"Sharpe Ratio\",\"Profit Factor\")\n    colnames(rtnTable) <- c(\"Performance\")\n    \n    rownames(rtnTable)\n    #colnames(rtnTable)\n    print(rtnTable)\n    rtnTable\n  })\n  \n  output$tableRisk <- renderTable({  \n    data <- data()\n    posStart <- min(which(as.Date(data$date,format=\"%Y-%m-%d\") >= as.Date(input$startDate,format=\"%Y-%m-%d\")))\n    posEnd <- max(which(as.Date(data$date,format=\"%Y-%m-%d\") <= as.Date(input$endDate,format=\"%Y-%m-%d\")))\n    x <- data$date[posStart:posEnd]\n    y <- data$rtn[posStart:posEnd]\n    \n    dailyDD <- as.vector(\n      # Drawdowns\n      PerformanceAnalytics::findDrawdowns\n      (y/100))\n    maxDD <- 100*round(min(dailyDD),3)\n    recoveryTime <- round(min(which(dailyDD[match(min(dailyDD),dailyDD):length(dailyDD)] == 0)),0)\n    painIndex <- round(PainIndex(y),2)\n    timeInMarket <- 100*round(length(which(y != 0))/length(y),2)\n    \n    riskTable <- rbind(paste(maxDD,\"%\",sep=\"\"),paste(recoveryTime,\" days\",sep=\"\"),painIndex,paste(timeInMarket,\"%\",sep=\"\"))\n    rownames(riskTable) <- c(\"Max.DD\",\"Recovery Time\",\"Pain Index\",\"% Time Invested\")\n    colnames(riskTable) <- c(\"Risk\")\n    \n    \n    riskTable\n    \n  })\n  \n  output$tableDaily <- renderTable({  \n    data <- data()\n    posStart <- min(which(as.Date(data$date,format=\"%Y-%m-%d\") >= as.Date(input$startDate,format=\"%Y-%m-%d\")))\n    posEnd <- max(which(as.Date(data$date,format=\"%Y-%m-%d\") <= as.Date(input$endDate,format=\"%Y-%m-%d\")))\n    x <- data$date[posStart:posEnd]\n    y <- data$rtn[posStart:posEnd]\n    \n    avRtn <- round(mean(y,na.rm=TRUE),2)\n    avRtnPos <- round(mean(y[y >0],na.rm=TRUE),2)\n    avRtnNeg <- round(mean(y[y <0],na.rm=TRUE),2)\n    hitRatio <- 100*round(length(which(y > 0))/length(which(y != 0)),2)\n    worstDay <- round(min(y),2)\n    bestDay <- round(max(y),2)\n    \n    dailyTable <- rbind(paste(avRtn,\"%\",sep=\"\"),paste(avRtnPos,\"%\",sep=\"\"),paste(avRtnNeg,\"%\",sep=\"\"),paste(hitRatio,\"%\",sep=\"\"),paste(worstDay,\"%\",sep=\"\"),paste(bestDay,\"%\",sep=\"\"))\n    colnames(dailyTable) <- c(\"Daily\")\n    rownames(dailyTable) <- c(\"Av. Rtn\",\"Av. Rtn > 0\",\"Av. Rtn < 0\",\"Hit Ratio\",\"Worst Day\",\"Best Day\")\n    \n    dailyTable                                 \n  })\n  \n  output$tableMonthly <- renderTable({  \n    data <- data()\n    posStart <- min(which(as.Date(data$date,format=\"%Y-%m-%d\") >= as.Date(input$startDate,format=\"%Y-%m-%d\")))\n    posEnd <- max(which(as.Date(data$date,format=\"%Y-%m-%d\") <= as.Date(input$endDate,format=\"%Y-%m-%d\")))\n    x <- data$date[posStart:posEnd]\n    y <- data$rtn[posStart:posEnd]\n    \n    months <- sort(unique(substring(x,1,7)))\n    monthlyRtn <- aggregate(y,by=list(substring(x,1,7)),sum)[,2]\n    \n    monthlyHitRate <- 100*round(length(which(monthlyRtn > 0))/length(monthlyRtn),2)\n    monthlyRtnAverage <- round(mean(monthlyRtn),2) \n    monthlyRtnPositive <- round(mean(monthlyRtn[which(monthlyRtn > 0)]),2) \n    monthlyRtnNegative <- round(mean(monthlyRtn[which(monthlyRtn < 0)]) ,2)\n    worstMonth <- round(min(monthlyRtn),2)\n    bestMonth <- round(max(monthlyRtn),2)\n    \n    monthlyTable <- rbind(paste(monthlyRtnAverage,\"%\",sep=\"\"),paste(monthlyRtnPositive,\"%\",sep=\"\"),paste(monthlyRtnNegative,\"%\",sep=\"\"),paste(monthlyHitRate,\"%\",sep=\"\"),paste(worstMonth,\"%\",sep=\"\"),paste(bestMonth,\"%\",sep=\"\"))\n    rownames(monthlyTable) <- c(\"Av. Rtn\",\"Av. Rtn > 0\",\"Av. Rtn < 0\",\"Hit Ratio\",\"Worst Month\",\"Best Month\")\n    colnames(monthlyTable) <- c(\"Monthly\")\n    \n    monthlyTable\n  })\n  \n}) \n",
    "created" : 1474200165867.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3454442680",
    "id" : "C3403843",
    "lastKnownWriteTime" : 1474213914,
    "last_content_update" : 1474213914624,
    "path" : "~/git/andy-shiny/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}